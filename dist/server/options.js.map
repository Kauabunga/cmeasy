{"version":3,"sources":["../../server/options.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;;;;;uBAGO,SAAS;;;;wBACR,UAAU;;;;oBAEd,MAAM;;;;iCACJ,sBAAsB;;;;;;;;AAFzC,sBAAS,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;qBAQxB,YAAW;;AAExB,SAAO;;AAEL,QAAI,EAAE,gBAAgB;;;AAGtB,OAAG,EAAE,EAAE;AACP,YAAQ,EAAE,WAAW,EAAE;AACvB,WAAO,EAAE,EAAE;AACX,UAAM,EAAE,EAAE;AACV,YAAQ,EAAE,EAAE;;AAEZ,aAAS,EAAE,OAAO;;AAElB,QAAI,EAAE;AACJ,kBAAY,EAAE,wBAAM,EAAE;AACtB,sBAAgB,EAAE,4BAAM,EAAE;KAC3B;;AAED,UAAM,EAAE,SAAS,EAAE;GACpB,CAAC;CACH;;AAED,SAAS,WAAW,GAAE;;AAEpB,wBAAS,OAAO,CAAC,+BAAO,KAAK,CAAC,GAAG,EAAE,+BAAO,KAAK,CAAC,OAAO,CAAC,CAAC;AACzD,wBAAS,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC5C,WAAO,CAAC,KAAK,CAAC,4BAA4B,GAAG,GAAG,CAAC,CAAC;AAClD,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;GAClB,CAAC,CAAC;;AAEH,+BAAgB;CACjB;;;;;AAKD,SAAS,SAAS,GAAE;AAClB,SAAO,CACL,gBAAgB,EAAE,EAClB,YAAY,EAAE,CACf,CAAA;CACF;;;;;AAMD,SAAS,YAAY,GAAE;AACrB,SAAO;;AAEL,QAAI,EAAE,WAAW;AACjB,aAAS,EAAE,KAAK;;AAEhB,iBAAa,EAAE,KAAK;AACpB,iBAAa,EAAE,KAAK;;AAEpB,cAAU,EAAE;AACV,WAAK,EAAE;AACL,YAAI,EAAE,QAAQ;AACd,aAAK,EAAE,YAAY;AACnB,qBAAa,EAAE,IAAI;OACpB;AACD,cAAQ,EAAE;AACR,YAAI,EAAE,QAAQ;AACd,aAAK,EAAE,eAAe;AACtB,gBAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC;OAC3B;AACD,aAAO,EAAE;AACP,YAAI,EAAE,QAAQ;AACd,aAAK,EAAE,cAAc;OACtB;KACF;GACF,CAAA;CACF;;;;;AAMD,SAAS,gBAAgB,GAAE;AACzB,SAAO;;AAEL,QAAI,EAAE,WAAW;AACjB,aAAS,EAAE,IAAI;;AAEf,cAAU,EAAE;AACV,WAAK,EAAE;AACL,YAAI,EAAE,QAAQ;AACd,aAAK,EAAE,iBAAiB;AACxB,mBAAS,yBAAyB;OACnC;KACF;GACF,CAAA;CACF","file":"options.js","sourcesContent":["/**\n * Main application routes\n */\n\n'use strict';\n\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport http from 'http';\nimport config from './config/environment';\n\n\n/**\n *\n */\nexport default function() {\n\n  return {\n\n    name: 'Example Cmeasy',\n\n    //TODO\n    app: '',\n    mongoose: getMongoose(),\n    express: '',\n    server: '',\n    socketio: '',\n\n    rootRoute: 'admin',\n\n    auth: {\n      authenticate: () => {},\n      getUserFromToken: () => {}\n    },\n\n    models: getModels()\n  };\n}\n\nfunction getMongoose(){\n\n  mongoose.connect(config.mongo.uri, config.mongo.options);\n  mongoose.connection.on('error', function(err) {\n    console.error('MongoDB connection error: ' + err);\n    process.exit(-1);\n  });\n\n  return mongoose;\n}\n\n/**\n *\n */\nfunction getModels(){\n  return [\n    getHomePageModel(),\n    getBlogModel()\n  ]\n}\n\n\n/**\n *\n */\nfunction getBlogModel(){\n  return {\n\n    name: 'Blog Post',\n    singleton: false,\n\n    disableDelete: false,\n    disableCreate: false,\n\n    definition: {\n      title: {\n        type: 'String',\n        label: 'Blog Title',\n        displayColumn: true\n      },\n      category: {\n        type: 'Select',\n        label: 'Blog category',\n        enum: ['Update', 'Random']\n      },\n      content: {\n        type: 'String',\n        label: 'Blog Content'\n      }\n    }\n  }\n}\n\n\n/**\n *\n */\nfunction getHomePageModel(){\n  return {\n\n    name: 'Home Page',\n    singleton: true,\n\n    definition: {\n      title: {\n        type: 'String',\n        label: 'Home Page Title',\n        default: 'Default Home Page Title'\n      }\n    }\n  }\n}\n"]}