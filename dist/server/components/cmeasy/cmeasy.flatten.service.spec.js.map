{"version":3,"sources":["../../../../server/components/cmeasy/cmeasy.flatten.service.spec.js"],"names":[],"mappings":";;;;oCAEoB,0BAA0B;;;;AAG9C,QAAQ,CAAC,YAAY,EAAE,YAAW;;AAEhC,IAAE,CAAC,2BAA2B,EAAE,YAAU;;AAExC,QAAI,aAAa,GAAG,uCAAQ;AAC1B,UAAI,EAAE;AACJ,YAAI,EAAE,QAAQ;OACf;KACF,CAAC,CAAC;GAEJ,CAAC,CAAC;;AAEH,IAAE,CAAC,2BAA2B,EAAE,YAAU;;AAExC,QAAI,aAAa,GAAG,uCAAQ;AAC1B,gBAAU,EAAE;AACV,mBAAW,EAAE;AACX,cAAI,EAAE,QAAQ;SACf;OACF;KACF,CAAC,CAAC;;AAEH,iBAAa,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;GAErE,CAAC,CAAC;;AAGH,IAAE,CAAC,2BAA2B,EAAE,YAAU;;AAExC,QAAI,aAAa,GAAG,uCAAQ;AAC1B,gBAAU,EAAE;AACV,mBAAW,EAAE;AACX,cAAI,EAAE,QAAQ;SACf;AACD,yBAAiB,EAAE;AACjB,cAAI,EAAE,QAAQ;SACf;OACF;AACD,YAAM,EAAE;AACN,YAAI,EAAE,QAAQ;AACd,qBAAa,EAAE,IAAI;AACnB,mBAAW,EAAE,IAAI;AACjB,mBAAS,MAAM;OAChB;AACD,eAAS,EAAE;AACT,YAAI,EAAE,CAAC;AACL,aAAG,EAAE;AACH,gBAAI,EAAE,QAAQ;WACf;SACF,CAAC;OACH;KACF,CAAC,CAAC;;AAEH,iBAAa,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACpE,iBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;GAElD,CAAC,CAAC;CAEJ,CAAC,CAAC","file":"cmeasy.flatten.service.spec.js","sourcesContent":["\n\nimport flatten from './cmeasy.flatten.service';\n\n\ndescribe('User Model', function() {\n\n  it('should flatten the schema', function(){\n\n    var flattenResult = flatten({\n      test: {\n        type: 'String'\n      }\n    });\n\n  });\n\n  it('should flatten the schema', function(){\n\n    var flattenResult = flatten({\n      testNested: {\n        nestedValue: {\n          type: 'String'\n        }\n      }\n    });\n\n    flattenResult['testNested.nestedValue'].type.should.equal('String');\n\n  });\n\n\n  it('should flatten the schema', function(){\n\n    var flattenResult = flatten({\n      testNested: {\n        nestedValue: {\n          type: 'String'\n        },\n        secondNestedValue: {\n          type: 'String'\n        }\n      },\n      single: {\n        type: 'String',\n        displayColumn: true,\n        disableEdit: true,\n        default: 'mooo'\n      },\n      testArray: {\n        type: [{\n          moo: {\n            type: 'String'\n          }\n        }]\n      }\n    });\n\n    flattenResult['testNested.nestedValue'].type.should.equal('String');\n    flattenResult.single.type.should.equal('String');\n\n  });\n\n});\n"]}