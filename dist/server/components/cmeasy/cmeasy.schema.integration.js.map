{"version":3,"sources":["../../../../server/components/cmeasy/cmeasy.schema.integration.js"],"names":[],"mappings":"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","file":"cmeasy.schema.integration.js","sourcesContent":["'use strict';\n\n\nvar cmeasy = require('../..');\nimport request from 'supertest';\nimport Promise from 'bluebird';\nimport uuid from 'uuid';\nimport _ from 'lodash';\n\n\n/**\n *\n */\ndescribe('Cmeasy blogPost schema API:', function() {\n\n\n  describe('GET /api/v1/content/schema/blogPost', function() {\n\n    it('should get the blog post schema', function(done) {\n      cmeasy.then(function(app) {\n        request(app)\n          .get('/admin/api/v1/content/schema/blogPost')\n          .expect(200)\n          .expect('Content-Type', /json/)\n          .end((err, res) => {\n\n            console.log('schema/blogPost', res.body);\n\n            done();\n          });\n      });\n    });\n\n  });\n\n  describe('GET /api/v1/content/schema/blogPost/modelFormly', function() {\n    it('should get the blog post formly model', function(done) {\n      cmeasy.then(function(app) {\n        request(app)\n          .get('/admin/api/v1/content/blogPost/modelFormly')\n          .expect(200)\n          .expect('Content-Type', /json/)\n          .end((err, res) => {\n\n            console.log('blogPost/modelFormly', res.body);\n\n            done();\n          });\n      });\n    });\n  });\n\n  describe('GET /api/v1/content/schema/blogPost/modelFormly', function() {\n\n    before(addSchemaField('blogPost'));\n\n    it('should update the blog post formly model', function(done) {\n      cmeasy.then(function(app) {\n        request(app)\n          .get('/admin/api/v1/content/blogPost/modelFormly')\n          .expect(200)\n          .expect('Content-Type', /json/)\n          .end((err, res) => {\n\n            res.body.length.should.equal(4);\n\n            //Should contain a 'newField' type\n            res.body.should.contain({\n              key: 'newField',\n              templateOptions: { label: 'New Field', cssClass: '' },\n              type: 'mdInput'\n            });\n\n            done();\n          });\n      });\n    });\n  });\n\n});\n\n/**\n *\n * @param schemaType\n * @returns {Function}\n */\nfunction addSchemaField(schemaType){\n\n  var newField = {\n    newField: {\n      type: 'String',\n      default: 'newField default',\n      disableEdit: false\n    }\n  };\n\n  return function(){\n    return cmeasy.then(function(app) {\n      return new Promise((success, failure)=> {\n        request(app)\n          .get(`/admin/api/v1/content/schema/${schemaType}`)\n          .expect(200)\n          .expect('Content-Type', /json/)\n          .end((err, res) => {\n            if(err){\n              return failure(err);\n            }\n            else {\n\n              var updatedSchema = res.body;\n              updatedSchema.definition = _.merge(res.body.definition, newField);\n\n              request(app)\n                .post(`/admin/api/v1/content/schema`)\n                .send(updatedSchema)\n                .expect(201)\n                .expect('Content-Type', /json/)\n                .end((err, res) => {\n                  if(err){\n                    return failure(err);\n                  }\n                  else {\n                    success(res.body);\n                  }\n                });\n            }\n          });\n      });\n    })\n  }\n}\n\n\n/**\n *\n */\ndescribe('Cmeasy meta schema API:', function() {\n\n  //TODO should test/implement to ensure this cannot be changed\n  describe('GET /api/v1/content/schema/CmeasyMetaSchema', function() {\n    it('should get the meta schema', function(done) {\n      cmeasy.then(function(app) {\n        request(app)\n          .get('/admin/api/v1/content/schema/CmeasyMetaSchema')\n          .expect(200)\n          .expect('Content-Type', /json/)\n          .end((err, res) => {\n            done();\n          });\n      });\n    });\n  });\n\n  describe('GET /api/v1/content/schema/CmeasyMetaSchema/modelFormly', function() {\n    it('should get the meta schema formly definition', function(done) {\n      cmeasy.then(function(app) {\n        request(app)\n          .get('/admin/api/v1/content/schema/modelFormly')\n          .expect(200)\n          .expect('Content-Type', /json/)\n          .end((err, res) => {\n\n            //TODO validate this response ....\n            console.log('CmeasyMetaSchema modelFormly');\n            console.log('CmeasyMetaSchema modelFormly');\n            console.log('CmeasyMetaSchema modelFormly');\n            console.log('CmeasyMetaSchema modelFormly');\n            console.log('CmeasyMetaSchema modelFormly', res.body);\n\n            done();\n          });\n      });\n    });\n  });\n\n});\n\n\n"]}