{"version":3,"sources":["../../../../server/components/cmeasy/cmeasy.schema.integration.js"],"names":[],"mappings":"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","file":"cmeasy.schema.integration.js","sourcesContent":["'use strict';\n\nconst cmeasy = require('../../app');\nconst options = require('../../options')();\nconst portfinder = require('portfinder');\nimport express from 'express';\nimport request from 'supertest';\nimport Promise from 'bluebird';\nimport _ from 'lodash';\n\ndescribe('Cmeasy blogPost schema API:', function() {\n\n  let app;\n  before(function(done) {\n    app = express();\n    options.express = app;\n\n    portfinder.getPort(function(error, port) {\n      if (error) {\n        return done(error);\n      }\n      process.env.PORT = port;\n      cmeasy(options)\n        .then(function() {\n          done();\n        });\n    });\n  });\n\n  describe('GET /api/v1/content/schema/blogPost', function() {\n\n    it('should get the blog post schema', function(done) {\n      request(app)\n        .get('/admin/api/v1/content/schema/blogPost')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n\n          console.log('schema/blogPost', res.body);\n\n          done();\n        });\n    });\n\n  });\n\n  describe('GET /api/v1/content/schema/blogPost/modelFormly', function() {\n\n    it('should get the blog post formly model', function(done) {\n      request(app)\n        .get('/admin/api/v1/content/blogPost/modelFormly')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n\n          console.log('blogPost/modelFormly', res.body);\n\n          done();\n        });\n    });\n  });\n\n  describe('GET /api/v1/content/schema/blogPost/modelFormly', function() {\n\n    before(addSchemaField('blogPost'));\n\n    it('should update the blog post formly model', function(done) {\n      request(app)\n        .get('/admin/api/v1/content/blogPost/modelFormly')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n\n          res.body.length.should.equal(4);\n\n          //Should contain a 'newField' type\n          res.body.should.contain({\n            key: 'newField',\n            templateOptions: {label: 'New Field', cssClass: ''},\n            type: 'mdInput'\n          });\n\n          done();\n        });\n    });\n  });\n\n\n  /**\n   * @param schemaType\n   * @returns {Function}\n   */\n  function addSchemaField(schemaType) {\n    const newField = {\n      newField: {\n        type: 'String',\n        default: 'newField default',\n        disableEdit: false\n      }\n    };\n\n    return function() {\n      return new Promise((success, failure) => {\n        request(app)\n          .get(`/admin/api/v1/content/schema/${schemaType}`)\n          .expect(200)\n          .expect('Content-Type', /json/)\n          .end((err, res) => {\n            if (err) {\n              return failure(err);\n            }\n            else {\n\n              var updatedSchema = res.body;\n              updatedSchema.definition = _.merge(res.body.definition, newField);\n\n              request(app)\n                .post(`/admin/api/v1/content/schema`)\n                .send(updatedSchema)\n                .expect(201)\n                .expect('Content-Type', /json/)\n                .end((err, res) => {\n                  if (err) {\n                    return failure(err);\n                  }\n                  else {\n                    success(res.body);\n                  }\n                });\n            }\n          });\n      })\n    }\n  }\n});\n\ndescribe('Cmeasy meta schema API:', function() {\n\n  let app;\n  before(function(done) {\n    app = express();\n    options.express = app;\n\n    portfinder.getPort(function(error, port) {\n      if (error) {\n        return done(error);\n      }\n      process.env.PORT = port;\n      cmeasy(options)\n        .then(function() {\n          done();\n        });\n    });\n  });\n\n  // TODO should test/implement to ensure this cannot be changed\n  describe('GET /api/v1/content/schema/CmeasyMetaSchema', function() {\n    it('should get the meta schema', function(done) {\n      request(app)\n        .get('/admin/api/v1/content/schema/CmeasyMetaSchema')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          done();\n        });\n    });\n  });\n\n  describe('GET /api/v1/content/schema/CmeasyMetaSchema/modelFormly', function() {\n    it('should get the meta schema formly definition', function(done) {\n      request(app)\n        .get('/admin/api/v1/content/schema/modelFormly')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n\n          //TODO validate this response ....\n          // console.log('CmeasyMetaSchema modelFormly');\n          // console.log('CmeasyMetaSchema modelFormly');\n          // console.log('CmeasyMetaSchema modelFormly');\n          // console.log('CmeasyMetaSchema modelFormly');\n          // console.log('CmeasyMetaSchema modelFormly', res.body);\n\n          done();\n        });\n    });\n  });\n});\n"]}