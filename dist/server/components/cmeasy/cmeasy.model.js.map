{"version":3,"sources":["../../../../server/components/cmeasy/cmeasy.model.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;sBAEC,QAAQ;;;;oBACL,MAAM;;;;wBACH,UAAU;;;;;;;;qBAMf,UAAS,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAC;AAC9C,MAAI,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;;;AAG5H,YAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;;AAElC,SAAO,aAAa,CAAC;CACtB;;;;;AAKD,SAAS,UAAU,CAAC,MAAM,EAAE,KAAK,EAAC;AAChC,SAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,EAAE,CAC9B,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CACpD,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;CAC/D;;;;;AAKD,SAAS,UAAU,GAAE;AACnB,SAAO;AACL,UAAM,EAAE,KAAK;AACb,WAAO,EAAE,OAAO;GACjB,CAAC;CACH;;;;;AAMD,SAAS,iBAAiB,CAAC,SAAS,EAAE,KAAK,EAAC;AAC1C,SAAU,WAAW,CAAC,SAAS,CAAC,eAAU,KAAK,CAAC,KAAK,EAAE,CAAG;CAC3D;;;;;;AAMD,SAAS,WAAW,CAAC,IAAI,EAAC;AACxB,SAAO,oBAAE,SAAS,CAAC,CAAC,IAAI,IAAI,EAAE,CAAA,CAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;CAChE;;;;;AAKD,SAAS,2BAA2B,CAAC,QAAQ,EAAC;AAC5C,SAAO,UAAS,KAAK,EAAC;AACpB,WAAO,yBAAE,KAAK,CAAC,CAAC,GAAG,CAAC,UAAS,IAAI,EAAC;AAChC,UAAI,CAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAC;AAC5C,YAAI,CAAC,WAAW,EAAE,CAAC;AACnB,eAAO,SAAS,CAAC;OAClB,MACI;AACH,eAAO,IAAI,CAAC;OACb;KACF,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC;GACnB,CAAA;CACF","file":"cmeasy.model.js","sourcesContent":["'use strict';\n\nimport _ from 'lodash';\nimport uuid from 'uuid';\nimport Promise from 'bluebird';\n\n\n/**\n *\n */\nexport default function(cmeasy, mongoose, model){\n  var mongooseModel = mongoose.model(getMongoModelName(cmeasy.getNamespace(), model), new mongoose.Schema({ }, getOptions()));\n\n  //Remove any dud models from the db\n  cleanModel(cmeasy, mongooseModel);\n\n  return mongooseModel;\n}\n\n/**\n *\n */\nfunction cleanModel(cmeasy, model){\n  return model.find({}).execAsync()\n    .then(removeModelsWithoutProperty(cmeasy.getIdKey()))\n    .then(removeModelsWithoutProperty(cmeasy.getInstanceKey()));\n}\n\n/**\n *\n */\nfunction getOptions(){\n  return {\n    strict: false,\n    typeKey: '$type'\n  };\n}\n\n\n/**\n *\n */\nfunction getMongoModelName(namespace, model){\n  return `${getSafeName(namespace)}_Model_${model.getId()}`;\n}\n\n/**\n *\n * @param name\n */\nfunction getSafeName(name){\n  return _.camelCase((name || '').toString().replace(/\\s/g, ''));\n}\n\n/**\n *\n */\nfunction removeModelsWithoutProperty(property){\n  return function(items){\n    return _(items).map(function(item){\n      if( ! item[property] || item[property] === ''){\n        item.removeAsync();\n        return undefined;\n      }\n      else {\n        return item;\n      }\n    }).filter().value;\n  }\n}\n"]}