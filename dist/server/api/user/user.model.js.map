{"version":3,"sources":["../../../../server/api/user/user.model.js"],"names":[],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nimport {Schema} from 'mongoose';\nconst R = require('ramda');\n\nvar UserSchema = new Schema({\n  name: String,\n  email: {\n    type: String,\n    lowercase: true,\n    required: true\n  },\n  role: {\n    type: String,\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  provider: String,\n  salt: String\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function() {\n    return {\n      'name': this.name,\n      'role': this.role\n    };\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      '_id': this._id,\n      'role': this.role\n    };\n  });\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n  .path('email')\n  .validate(function(email) {\n    return email.length;\n  }, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema\n  .path('password')\n  .validate(function(password) {\n    return password.length;\n  }, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema\n  .path('email')\n  .validate(function(value, respond) {\n    var self = this;\n    return this.constructor.findOne({email: value})\n      .then(function(user) {\n        if (user) {\n          if (self.id === user.id) {\n            return respond(true);\n          }\n          return respond(false);\n        }\n        return respond(true);\n      })\n      .catch(function(err) {\n        throw err;\n      });\n  }, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function(next) {\n    const debug = require('debug')('cmeasy:user:preSave');\n    if (!this.isModified('password')) {\n      debug('Password has not been modified');\n      return next();\n    }\n\n    if (!validatePresenceOf(this.password) && this.provider === 'local') {\n      debug('No password present on user with provider = local');\n      next(new Error('Invalid password'));\n    }\n\n    debug('Creating salt');\n    this.makeSalt((saltErr, salt) => {\n      if (saltErr) {\n        next(saltErr);\n      }\n\n      debug('Encrypting password');\n      this.salt = salt;\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n        if (encryptErr) {\n          next(encryptErr);\n        }\n        debug('Password encrypted');\n        this.password = hashedPassword;\n        next();\n      });\n    });\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @api public\n   */\n  authenticate(password, callback) {\n    this.encryptPassword(password, (err, pwdGen) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (this.password === pwdGen) {\n        callback(null, true);\n      } else {\n        callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} byteSize Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(callback) {\n    return crypto.randomBytes(16, (err, salt) => {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, salt.toString('base64'));\n    });\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  encryptPassword(password, callback) {\n    const debug = require('debug')('cmeasy:user:encryptPassword');\n    if (!password || !this.salt) {\n      debug('salt or password are missing, aborting');\n      return null;\n    }\n\n    var defaultIterations = 10000;\n    var defaultKeyLength = 64;\n    var salt = new Buffer(this.salt, 'base64');\n\n    debug('Encrypting');\n    crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, 'sha512', (error, key) => {\n      debug('Encryption complete');\n      if (error) {\n        debug('Encryption error');\n        return callback(error);\n      }\n\n      debug('Encrypted');\n      callback(null, key.toString('base64'));\n    });\n  }\n};\n\nlet User;\nif (R.contains('User', mongoose.modelNames())) {\n  User = mongoose.model('User');\n} else {\n  User = mongoose.model('User', UserSchema);\n}\n\nexport default User;\n"]}