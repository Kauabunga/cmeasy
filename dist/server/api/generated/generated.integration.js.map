{"version":3,"sources":["../../../../server/api/generated/generated.integration.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;yBAGO,WAAW;;;;AAD/B,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAG3B,IAAI,YAAY,CAAC","file":"generated.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newGenerated;\n\n/*\ndescribe('Generated API:', function() {\n\n  describe('GET /api/generated', function() {\n    var generateds;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/generated')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          generateds = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      generateds.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/generated', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/generated')\n        .send({\n          name: 'New Generated',\n          info: 'This is the brand new generated!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newGenerated = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created generated', function() {\n      newGenerated.name.should.equal('New Generated');\n      newGenerated.info.should.equal('This is the brand new generated!!!');\n    });\n\n  });\n\n  describe('GET /api/generated/:id', function() {\n    var generated;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/generated/' + newGenerated._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          generated = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      generated = {};\n    });\n\n    it('should respond with the requested generated', function() {\n      generated.name.should.equal('New Generated');\n      generated.info.should.equal('This is the brand new generated!!!');\n    });\n\n  });\n\n  describe('PUT /api/generated/:id', function() {\n    var updatedGenerated;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/generated/' + newGenerated._id)\n        .send({\n          name: 'Updated Generated',\n          info: 'This is the updated generated!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedGenerated = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedGenerated = {};\n    });\n\n    it('should respond with the updated generated', function() {\n      updatedGenerated.name.should.equal('Updated Generated');\n      updatedGenerated.info.should.equal('This is the updated generated!!!');\n    });\n\n  });\n\n  describe('DELETE /api/generated/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/generated/' + newGenerated._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when generated does not exist', function(done) {\n      request(app)\n        .delete('/api/generated/' + newGenerated._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n*/\n"]}