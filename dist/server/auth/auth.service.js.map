{"version":3,"sources":["../../../server/auth/auth.service.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;sBAEM,WAAW;;;;4BACd,cAAc;;;;0BACP,aAAa;;;;oCAChB,uBAAuB;;;;gCAC1B,wBAAwB;;;;AAEzC,IAAI,WAAW,GAAG,6BAAW;AAC3B,QAAM,EAAE,oBAAO,OAAO,CAAC,OAAO;CAC/B,CAAC,CAAC;;;;;;;AAMI,SAAS,eAAe,GAAG;AAChC,SAAO,wCAAS;;GAEb,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;;AAE5B,QAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE;AACzD,aAAO,GAAG,CAAC,OAAO,CAAC,aAAa,GAAG,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC;KACvE,MACI;AACH,eAAO,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;OACpC;GACF,CAAC;;GAED,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC5B,WAAO,8BAAK,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAC/B,IAAI,CAAC,UAAA,IAAI,EAAI;AACZ,UAAI,CAAC,IAAI,EAAE;AACT,eAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;OAC9B,MACI;AACH,WAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAChB,eAAO,IAAI,EAAE,CAAC;OACf;KACF,CAAC,SACI,CAAC,UAAA,GAAG;aAAI,IAAI,CAAC,GAAG,CAAC;KAAA,CAAC,CAAC;GAC5B,CAAC,CAAC;CACN;;;;;;AAKM,SAAS,OAAO,CAAC,YAAY,EAAE;;;AAGpC,MAAI,CAAC,YAAY,EAAE;AACjB,UAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;GAClD;;AAED,SAAO,wCAAS,CACb,GAAG,CAAC,eAAe,EAAE,CAAC,CACtB,GAAG,CAAC,SAAS,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC9C,QAAI,oBAAO,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IACvC,oBAAO,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;AAC1C,aAAO,IAAI,EAAE,CAAC;KACf,MAAM;AACL,aAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1C;GACF,CAAC,CAAC;CACN;;;;;;AAKM,SAAS,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE;AAClC,SAAO,0BAAI,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,oBAAO,OAAO,CAAC,OAAO,EAAE;AAC/D,aAAS,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;GACvB,CAAC,CAAC;CACJ","file":"auth.service.js","sourcesContent":["'use strict';\n\nimport config from '../config';\nimport jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\nimport compose from 'composable-middleware';\nimport User from '../api/user/user.model';\n\nvar validateJwt = expressJwt({\n  secret: config.secrets.session\n});\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\nexport function isAuthenticated() {\n  return compose()\n    // Validate jwt\n    .use(function(req, res, next) {\n      // allow access_token to be passed through query parameter as well\n      if (req.query && req.query.hasOwnProperty('access_token')) {\n        return req.headers.authorization = 'Bearer ' + req.query.access_token; //jshint ignore:line\n      }\n      else {\n        return validateJwt(req, res, next);\n      }\n    })\n    // Attach user to request\n    .use(function(req, res, next) {\n      return User.findById(req.user._id)\n        .then(user => {\n          if (!user) {\n            return res.status(401).end();\n          }\n          else {\n            req.user = user;\n            return next();\n          }\n        })\n        .catch(err => next(err));\n    });\n}\n\n/**\n * Checks if the user role meets the minimum requirements of the route\n */\nexport function hasRole(roleRequired) {\n\n  /* istanbul ignore if */\n  if (!roleRequired) {\n    throw new Error('Required role needs to be set');\n  }\n\n  return compose()\n    .use(isAuthenticated())\n    .use(function meetsRequirements(req, res, next) {\n      if (config.userRoles.indexOf(req.user.role) >=\n          config.userRoles.indexOf(roleRequired)) {\n        return next();\n      } else {\n        return res.status(403).send('Forbidden');\n      }\n    });\n}\n\n/**\n * Returns a jwt token signed by the app secret\n */\nexport function signToken(id, role) {\n  return jwt.sign({ _id: id, role: role }, config.secrets.session, {\n    expiresIn: 60 * 60 * 5\n  });\n}\n\n"]}