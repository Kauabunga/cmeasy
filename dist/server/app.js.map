{"version":3,"sources":["../../server/app.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;iCAGM,sBAAsB;;;;oBAExB,MAAM;;;;sBACT,QAAQ;;;;sBACH,UAAU;;;;;;;;;;;AAU7B,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,YAA2B;MAAlB,WAAW,yDAAI,EAAE;;AAEnD,SAAO,wBAAW,WAAW,CAAC,CAC3B,IAAI,CAAC,UAAS,MAAM,EAAC;;;;gCAIY,oBAAoB,CAAC,MAAM,CAAC;;QAAtD,GAAG,yBAAH,GAAG;QAAE,MAAM,yBAAN,MAAM;QAAE,QAAQ,yBAAR,QAAQ;;;;AAI3B,WAAO,CAAC,kBAAkB,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;;;AAIrD,WAAO,CAAC,kBAAkB,CAAC,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAEvD,WAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAExC,WAAO,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAEjC,QAAI,CAAE,MAAM,CAAC,UAAU,EAAE,CAAC,uBAAuB,EAAE,EAAC;AAClD,kBAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;KAC/C;;AAED,WAAO,GAAG,CAAC;GACZ,CAAC,CAAC;CAGN,CAAC;;;;;AAMF,SAAS,oBAAoB,CAAC,MAAM,EAAC;;AAEnC,MAAI,GAAG,CAAC;AACR,MAAI,MAAM,CAAC;;AAEX,MAAG,MAAM,CAAC,UAAU,EAAE,CAAC,uBAAuB,EAAE,EAAC;;AAE/C,OAAG,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,CAAC;GACxC,MACI;AACH,OAAG,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC;AACzC,UAAM,GAAG,kBAAK,YAAY,CAAC,GAAG,CAAC,CAAC;GACjC;;;;;;;AAOD,SAAO;AACL,OAAG,EAAE,GAAG;AACR,UAAM,EAAE,MAAM;;GAEf,CAAA;CACF;;;;;;;;AASD,SAAS,kBAAkB,CAAC,GAAG,EAAE,MAAM,EAAE;AACvC,SAAO,YAAU;AACf,UAAM,CAAC,MAAM,CAAC,+BAAO,IAAI,EAAE,+BAAO,EAAE,EAAE,YAAW;AAC/C,aAAO,CAAC,GAAG,CAAC,4CAA4C,EAAE,+BAAO,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;KACxF,CAAC,CAAC;GACJ,CAAA;CACF","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\n\nimport config from './config/environment';\n\nimport http from 'http';\nimport _ from 'lodash';\nimport Cmeasy from './cmeasy';\n\n\n/**\n * Expose app\n *\n * TODO expose as app and also expose as express route\n *\n * @type {Function}\n */\nexports = module.exports = function(userOptions  = {}){\n\n  return new Cmeasy(userOptions)\n    .then(function(cmeasy){\n\n      //TODO move handle mongo connect from cmeasy options here?\n\n      var { app, server, socketio } = prepareExpressServer(cmeasy);\n\n      //require('./config/socketio')(socketio);\n\n      require('./config/express').coreExpress(app, cmeasy);\n\n      //TODO serve up static routes base on rootRoute configuration....\n      // i.e. /assets/fonts/xyz.font needs to be served up as /rootRoute/assets/fonts/xyz.font\n      require('./config/express').staticExpress(app, cmeasy);\n\n      require('./routes-cmeasy')(app, cmeasy);\n\n      require('./routes')(app, cmeasy);\n\n      if( ! cmeasy.getOptions().isUserDefinedExpressApp()){\n        setImmediate(startExpressServer(app, server));\n      }\n\n      return app;\n    });\n\n\n};\n\n\n/**\n *\n */\nfunction prepareExpressServer(cmeasy){\n\n  var app;\n  var server;\n\n  if(cmeasy.getOptions().isUserDefinedExpressApp()){\n    //TODO validate correctly configured express app?\n    app = cmeasy.getOptions().getExpress();\n  }\n  else {\n    app = cmeasy.getOptions().getExpress()();\n    server = http.createServer(app);\n  }\n\n  //let socketio = require('socket.io')(server, {\n  //  serveClient: config.env !== 'production',\n  //  path: '/socket.io-client'\n  //});\n\n  return {\n    app: app,\n    server: server//,\n    //socketio: socketio\n  }\n}\n\n\n/**\n * Start server\n *\n * @param server\n * @returns {Function}\n */\nfunction startExpressServer(app, server) {\n  return function(){\n    server.listen(config.port, config.ip, function() {\n      console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n    });\n  }\n}\n"]}